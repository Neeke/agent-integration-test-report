2017-12-15 07:24:30,549 main DEBUG Initializing configuration XmlConfiguration[location=jar:file:/home/sw_test/.jenkins/workspace/automatic_test/workspace/skywalking-autotest.jar!/log4j2.xml]
2017-12-15 07:24:30,555 main DEBUG Installed script engines
2017-12-15 07:24:30,876 main DEBUG Oracle Nashorn Version: 1.8.0_151, Language: ECMAScript, Threading: Not Thread Safe, Compile: true, Names: {nashorn, Nashorn, js, JS, JavaScript, javascript, ECMAScript, ecmascript}
2017-12-15 07:24:30,876 main DEBUG PluginManager 'Core' found 112 plugins
2017-12-15 07:24:30,877 main DEBUG PluginManager 'Level' found 0 plugins
2017-12-15 07:24:30,881 main DEBUG PluginManager 'Lookup' found 13 plugins
2017-12-15 07:24:30,882 main DEBUG Building Plugin[name=layout, class=org.apache.logging.log4j.core.layout.PatternLayout].
2017-12-15 07:24:30,891 main DEBUG PluginManager 'TypeConverter' found 26 plugins
2017-12-15 07:24:30,904 main DEBUG PatternLayout$Builder(pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %l - %m%n", PatternSelector=null, Configuration(jar:file:/home/sw_test/.jenkins/workspace/automatic_test/workspace/skywalking-autotest.jar!/log4j2.xml), Replace=null, charset="UTF-8", alwaysWriteExceptions="null", disableAnsi="null", noConsoleNoAnsi="null", header="null", footer="null")
2017-12-15 07:24:30,904 main DEBUG PluginManager 'Converter' found 41 plugins
2017-12-15 07:24:30,914 main DEBUG Building Plugin[name=appender, class=org.apache.logging.log4j.core.appender.ConsoleAppender].
2017-12-15 07:24:30,921 main DEBUG ConsoleAppender$Builder(target="SYSTEM_OUT", follow="null", direct="null", bufferedIo="null", bufferSize="null", immediateFlush="null", ignoreExceptions="null", PatternLayout([%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %l - %m%n), name="Console", Configuration(jar:file:/home/sw_test/.jenkins/workspace/automatic_test/workspace/skywalking-autotest.jar!/log4j2.xml), Filter=null)
2017-12-15 07:24:30,922 main DEBUG Starting OutputStreamManager SYSTEM_OUT.false.false
2017-12-15 07:24:30,922 main DEBUG Building Plugin[name=appenders, class=org.apache.logging.log4j.core.config.AppendersPlugin].
2017-12-15 07:24:30,923 main DEBUG createAppenders(={Console})
2017-12-15 07:24:30,924 main DEBUG Building Plugin[name=AppenderRef, class=org.apache.logging.log4j.core.config.AppenderRef].
2017-12-15 07:24:30,927 main DEBUG createAppenderRef(ref="Console", level="null", Filter=null)
2017-12-15 07:24:30,928 main DEBUG Building Plugin[name=root, class=org.apache.logging.log4j.core.config.LoggerConfig$RootLogger].
2017-12-15 07:24:30,928 main DEBUG createLogger(additivity="null", level="DEBUG", includeLocation="null", ={Console}, ={}, Configuration(jar:file:/home/sw_test/.jenkins/workspace/automatic_test/workspace/skywalking-autotest.jar!/log4j2.xml), Filter=null)
2017-12-15 07:24:30,930 main DEBUG Building Plugin[name=loggers, class=org.apache.logging.log4j.core.config.LoggersPlugin].
2017-12-15 07:24:30,931 main DEBUG createLoggers(={root})
2017-12-15 07:24:30,932 main DEBUG Configuration XmlConfiguration[location=jar:file:/home/sw_test/.jenkins/workspace/automatic_test/workspace/skywalking-autotest.jar!/log4j2.xml] initialized
2017-12-15 07:24:30,932 main DEBUG Starting configuration XmlConfiguration[location=jar:file:/home/sw_test/.jenkins/workspace/automatic_test/workspace/skywalking-autotest.jar!/log4j2.xml]
2017-12-15 07:24:30,932 main DEBUG Started configuration XmlConfiguration[location=jar:file:/home/sw_test/.jenkins/workspace/automatic_test/workspace/skywalking-autotest.jar!/log4j2.xml] OK.
2017-12-15 07:24:30,933 main DEBUG Shutting down OutputStreamManager SYSTEM_OUT.false.false-1
2017-12-15 07:24:30,933 main DEBUG Shut down OutputStreamManager SYSTEM_OUT.false.false-1, all resources released: true
2017-12-15 07:24:30,934 main DEBUG Appender DefaultConsole-1 stopped with status true
2017-12-15 07:24:30,934 main DEBUG Stopped org.apache.logging.log4j.core.config.DefaultConfiguration@2328c243 OK
2017-12-15 07:24:30,983 main DEBUG Registering MBean org.apache.logging.log4j2:type=55f96302
2017-12-15 07:24:30,986 main DEBUG Registering MBean org.apache.logging.log4j2:type=55f96302,component=StatusLogger
2017-12-15 07:24:30,987 main DEBUG Registering MBean org.apache.logging.log4j2:type=55f96302,component=ContextSelector
2017-12-15 07:24:30,988 main DEBUG Registering MBean org.apache.logging.log4j2:type=55f96302,component=Loggers,name=
2017-12-15 07:24:30,989 main DEBUG Registering MBean org.apache.logging.log4j2:type=55f96302,component=Appenders,name=Console
2017-12-15 07:24:30,991 main DEBUG Reconfiguration complete for context[name=55f96302] at URI jar:file:/home/sw_test/.jenkins/workspace/automatic_test/workspace/skywalking-autotest.jar!/log4j2.xml (org.apache.logging.log4j.core.LoggerContext@5c5eefef) with optional ClassLoader: null
2017-12-15 07:24:30,992 main DEBUG Shutdown hook enabled. Registering a new one.
2017-12-15 07:24:30,992 main DEBUG LoggerContext[name=55f96302, org.apache.logging.log4j.core.LoggerContext@5c5eefef] started OK.
[2017-12-15 07:24:30:996] [INFO] - org.skywalking.apm.test.agent.tool.Main.main(Main.java:19) - Begin to validate data.
[2017-12-15 07:24:31:001] [INFO] - org.skywalking.apm.test.agent.tool.entity.TestCaseDesc$Parser.parse(TestCaseDesc.java:41) - load case desc: caseName[dubbox-rest-case], caseRequestURL[http://localhost:18080/dubbox-case/case/dubbox-rest], components[[org.skywalking.apm.test.agent.tool.entity.TestCase$Component@1623b78d, org.skywalking.apm.test.agent.tool.entity.TestCase$Component@c8c12ac]], isValidate[true]
[2017-12-15 07:24:31:001] [INFO] - org.skywalking.apm.test.agent.tool.Main.main(Main.java:44) - start to assert data of test case[dubbox-rest-case]
[2017-12-15 07:24:31:119] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:12) - excepted data:
{
  "registryItems": {
    "applications": [
      {
        "dubbox-provider": "nq 0"
      },
      {
        "dubbox-consumer": "nq 0"
      }
    ],
    "instances": [
      {
        "dubbox-provider": 1
      },
      {
        "dubbox-consumer": 1
      }
    ],
    "operationNames": [
      {
        "dubbox-consumer": [
          "/dubbox-case/case/dubbox-rest"
        ]
      },
      {
        "dubbox-provider": [
          "org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "dubbox-consumer",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "RPCFramework",
              "tags": [
                {
                  "key": "url",
                  "value": "not null"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "3",
              "isError": false,
              "spanType": "Exit",
              "peer": "not null",
              "peerId": "eq 0"
            },
            {
              "operationName": "/dubbox-case/case/dubbox-rest",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/dubbox-case/case/dubbox-rest"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "1",
              "isError": false,
              "spanType": "Entry",
              "peerId": "eq 0"
            }
          ]
        }
      ]
    },
    {
      "applicationCode": "dubbox-provider",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "tags": [
                {
                  "key": "url",
                  "value": "not null"
                }
              ],
              "logs": [],
              "refs": [
                {
                  "parentSpanId": 1,
                  "parentTraceSegmentId": "${dubbox-consumer[0]}",
                  "entryServiceName": "/dubbox-case/case/dubbox-rest",
                  "networkAddress": "not null",
                  "parentServiceName": "/dubbox-case/case/dubbox-rest",
                  "refType": "not null",
                  "entryApplicationInstanceId": "nq 0"
                }
              ],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "3",
              "isError": false,
              "spanType": "Entry",
              "peerId": "eq 0"
            }
          ]
        }
      ]
    }
  ]
}
[2017-12-15 07:24:31:124] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:13) - actual data:
{
  "registryItems": {
    "applications": [
      {
        "dubbox-provider": 2
      },
      {
        "dubbox-consumer": 3
      }
    ],
    "instances": [
      {
        "dubbox-provider": 1
      },
      {
        "dubbox-consumer": 1
      }
    ],
    "operationNames": [
      {
        "dubbox-provider": [
          "org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()"
        ]
      },
      {
        "dubbox-consumer": [
          "org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()",
          "/dubbox-case/case/dubbox-rest"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "dubbox-consumer",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "2.40.15132933747430000",
          "spans": [
            {
              "operationName": "org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "RPCFramework",
              "tags": [
                {
                  "key": "url",
                  "value": "rest://172.18.0.4:20880/org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()"
                }
              ],
              "startTime": "1513293376929",
              "endTime": "1513293379447",
              "componentId": "3",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "172.18.0.4:20880",
              "peerId": "0"
            },
            {
              "operationName": "/dubbox-case/case/dubbox-rest",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/dubbox-case/case/dubbox-rest"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "startTime": "1513293374749",
              "endTime": "1513293379454",
              "componentId": "1",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        }
      ]
    },
    {
      "applicationCode": "dubbox-provider",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "1.52.15132933773210000",
          "spans": [
            {
              "operationName": "org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "RPCFramework",
              "tags": [
                {
                  "key": "url",
                  "value": "rest://172.18.0.4:20880/org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()"
                }
              ],
              "refs": [
                {
                  "parentServiceId": 0,
                  "parentServiceName": "/dubbox-case/case/dubbox-rest",
                  "networkAddressId": 0,
                  "entryServiceId": 0,
                  "refType": "CrossProcess",
                  "parentSpanId": 1,
                  "parentTraceSegmentId": "2.40.15132933747430000",
                  "parentApplicationInstanceId": 2,
                  "networkAddress": "172.18.0.4:20880",
                  "entryServiceName": "/dubbox-case/case/dubbox-rest",
                  "entryApplicationInstanceId": 2
                }
              ],
              "startTime": "1513293377327",
              "endTime": "1513293379398",
              "componentId": "3",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        }
      ]
    }
  ]
}
[2017-12-15 07:24:31:126] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:12) - registry applications assert successful.
[2017-12-15 07:24:31:131] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:14) - registry instances assert successful.
[2017-12-15 07:24:31:132] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:16) - registry operation name assert successful.
[2017-12-15 07:24:31:133] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:134] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:135] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:16) - segment items assert successful.
[2017-12-15 07:24:31:136] [INFO] - org.skywalking.apm.test.agent.tool.entity.TestCaseDesc$Parser.parse(TestCaseDesc.java:41) - load case desc: caseName[httpclient-case], caseRequestURL[http://localhost:18080/httpclient-case/case/httpclient], components[[org.skywalking.apm.test.agent.tool.entity.TestCase$Component@cecf639, org.skywalking.apm.test.agent.tool.entity.TestCase$Component@1caa0244]], isValidate[true]
[2017-12-15 07:24:31:136] [INFO] - org.skywalking.apm.test.agent.tool.Main.main(Main.java:44) - start to assert data of test case[httpclient-case]
[2017-12-15 07:24:31:152] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:12) - excepted data:
{
  "registryItems": {
    "applications": [
      {
        "httpclient-case": "nq 0"
      }
    ],
    "instances": [
      {
        "httpclient-case": 1
      }
    ],
    "operationNames": [
      {
        "httpclient-case": [
          "/httpclient-case/case/httpclient",
          "/httpclient-case/case/context-propagate"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "httpclient-case",
      "segmentSize": "2",
      "segments": [
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "/httpclient-case/case/context-propagate",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://127.0.0.1:8080/httpclient-case/case/context-propagate"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "eq 2",
              "isError": false,
              "spanType": "Exit",
              "peerId": "eq 0"
            },
            {
              "operationName": "/httpclient-case/case/httpclient",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/httpclient-case/case/httpclient"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "1",
              "isError": false,
              "spanType": "Entry",
              "peerId": "eq 0"
            }
          ]
        },
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "/httpclient-case/case/context-propagate",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://127.0.0.1:8080/httpclient-case/case/context-propagate"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "refs": [
                {
                  "parentSpanId": 1,
                  "parentTraceSegmentId": "${httpclient-case[0]}",
                  "entryServiceName": "/httpclient-case/case/httpclient",
                  "networkAddress": "127.0.0.1:8080",
                  "parentServiceName": "/httpclient-case/case/httpclient",
                  "entryApplicationInstanceId": "nq 0"
                }
              ],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "1",
              "isError": false,
              "spanType": "Entry",
              "peerId": "eq 0"
            }
          ]
        }
      ]
    }
  ]
}
[2017-12-15 07:24:31:155] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:13) - actual data:
{
  "registryItems": {
    "applications": [
      {
        "httpclient-case": 2
      }
    ],
    "instances": [
      {
        "httpclient-case": 1
      }
    ],
    "operationNames": [
      {
        "httpclient-case": [
          "/httpclient-case/case/httpclient",
          "/httpclient-case/case/context-propagate"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "httpclient-case",
      "segmentSize": "2",
      "segments": [
        {
          "segmentId": "1.34.15132934626620000",
          "spans": [
            {
              "operationName": "/httpclient-case/case/context-propagate",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://127.0.0.1:8080/httpclient-case/case/context-propagate"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "refs": [
                {
                  "parentServiceId": 0,
                  "parentServiceName": "/httpclient-case/case/httpclient",
                  "networkAddressId": 0,
                  "entryServiceId": 0,
                  "refType": "CrossProcess",
                  "parentSpanId": 1,
                  "parentTraceSegmentId": "1.33.15132934623450000",
                  "parentApplicationInstanceId": 1,
                  "networkAddress": "127.0.0.1:8080",
                  "entryServiceName": "/httpclient-case/case/httpclient",
                  "entryApplicationInstanceId": 1
                }
              ],
              "startTime": "1513293462662",
              "endTime": "1513293462673",
              "componentId": "1",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        },
        {
          "segmentId": "1.33.15132934623450000",
          "spans": [
            {
              "operationName": "/httpclient-case/case/context-propagate",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://127.0.0.1:8080/httpclient-case/case/context-propagate"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "startTime": "1513293462587",
              "endTime": "1513293462693",
              "componentId": "2",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "127.0.0.1:8080",
              "peerId": "0"
            },
            {
              "operationName": "/httpclient-case/case/httpclient",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/httpclient-case/case/httpclient"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "startTime": "1513293462350",
              "endTime": "1513293462695",
              "componentId": "1",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        }
      ]
    }
  ]
}
[2017-12-15 07:24:31:156] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:12) - registry applications assert successful.
[2017-12-15 07:24:31:156] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:14) - registry instances assert successful.
[2017-12-15 07:24:31:156] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:16) - registry operation name assert successful.
[2017-12-15 07:24:31:156] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:46) - excepted span size are not equals actual span size, ignore this segment.
[2017-12-15 07:24:31:156] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:157] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:157] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:16) - segment items assert successful.
[2017-12-15 07:24:31:157] [INFO] - org.skywalking.apm.test.agent.tool.entity.TestCaseDesc$Parser.parse(TestCaseDesc.java:41) - load case desc: caseName[jedis-standalone-case], caseRequestURL[http://localhost:18080/jedis-standalone-case/case/jedis-standalone], components[[org.skywalking.apm.test.agent.tool.entity.TestCase$Component@7d61eb55, org.skywalking.apm.test.agent.tool.entity.TestCase$Component@222a59e6]], isValidate[true]
[2017-12-15 07:24:31:157] [INFO] - org.skywalking.apm.test.agent.tool.Main.main(Main.java:44) - start to assert data of test case[jedis-standalone-case]
[2017-12-15 07:24:31:173] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:12) - excepted data:
{
  "registryItems": {
    "applications": [
      {
        "jedis-standalone-case": "nq 0"
      }
    ],
    "instances": [
      {
        "jedis-standalone-case": 1
      }
    ],
    "operationNames": [
      {
        "jedis-standalone-case": [
          "/jedis-standalone-case/case/jedis-standalone"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "jedis-standalone-case",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "Jedis/set",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "Redis"
                },
                {
                  "key": "db.statement",
                  "value": "set a"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "7",
              "isError": false,
              "spanType": "Exit",
              "peer": "redis-server:6379",
              "peerId": "eq 0"
            },
            {
              "operationName": "Jedis/get",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "2",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "Redis"
                },
                {
                  "key": "db.statement",
                  "value": "get a"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "7",
              "isError": false,
              "spanType": "Exit",
              "peer": "redis-server:6379",
              "peerId": "eq 0"
            },
            {
              "operationName": "Jedis/del",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "3",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "Redis"
                },
                {
                  "key": "db.statement",
                  "value": "del a"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "7",
              "isError": false,
              "spanType": "Exit",
              "peer": "redis-server:6379",
              "peerId": "eq 0"
            },
            {
              "operationName": "/jedis-standalone-case/case/jedis-standalone",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/jedis-standalone-case/case/jedis-standalone"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "1",
              "isError": false,
              "spanType": "Entry",
              "peerId": "eq 0"
            }
          ]
        }
      ]
    }
  ]
}
[2017-12-15 07:24:31:176] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:13) - actual data:
{
  "registryItems": {
    "applications": [
      {
        "jedis-standalone-case": 2
      }
    ],
    "instances": [
      {
        "jedis-standalone-case": 1
      }
    ],
    "operationNames": [
      {
        "jedis-standalone-case": [
          "Jedis/set",
          "/jedis-standalone-case/case/jedis-standalone",
          "Jedis/del",
          "Jedis/get"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "jedis-standalone-case",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "1.34.15132935311700000",
          "spans": [
            {
              "operationName": "Jedis/set",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "Redis"
                },
                {
                  "key": "db.statement",
                  "value": "set a"
                }
              ],
              "startTime": "1513293533354",
              "endTime": "1513293533370",
              "componentId": "7",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "redis-server:6379",
              "peerId": "0"
            },
            {
              "operationName": "Jedis/get",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "2",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "Redis"
                },
                {
                  "key": "db.statement",
                  "value": "get a"
                }
              ],
              "startTime": "1513293533370",
              "endTime": "1513293533370",
              "componentId": "7",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "redis-server:6379",
              "peerId": "0"
            },
            {
              "operationName": "Jedis/del",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "3",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "Redis"
                },
                {
                  "key": "db.statement",
                  "value": "del a"
                }
              ],
              "startTime": "1513293533370",
              "endTime": "1513293533371",
              "componentId": "7",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "redis-server:6379",
              "peerId": "0"
            },
            {
              "operationName": "/jedis-standalone-case/case/jedis-standalone",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/jedis-standalone-case/case/jedis-standalone"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "startTime": "1513293531176",
              "endTime": "1513293533379",
              "componentId": "1",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        }
      ]
    }
  ]
}
[2017-12-15 07:24:31:176] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:12) - registry applications assert successful.
[2017-12-15 07:24:31:177] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:14) - registry instances assert successful.
[2017-12-15 07:24:31:177] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:16) - registry operation name assert successful.
[2017-12-15 07:24:31:177] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:177] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:16) - segment items assert successful.
[2017-12-15 07:24:31:178] [INFO] - org.skywalking.apm.test.agent.tool.entity.TestCaseDesc$Parser.parse(TestCaseDesc.java:41) - load case desc: caseName[mysql-case], caseRequestURL[http://localhost:18080/mysql-case/case/mysql], components[[org.skywalking.apm.test.agent.tool.entity.TestCase$Component@14f9390f, org.skywalking.apm.test.agent.tool.entity.TestCase$Component@6c0d7c83]], isValidate[true]
[2017-12-15 07:24:31:178] [INFO] - org.skywalking.apm.test.agent.tool.Main.main(Main.java:44) - start to assert data of test case[mysql-case]
[2017-12-15 07:24:31:189] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:12) - excepted data:
{
  "registryItems": {
    "applications": [
      {
        "mysql-case": "nq 0"
      }
    ],
    "instances": [
      {
        "mysql-case": 1
      }
    ],
    "operationNames": [
      {
        "mysql-case": [
          "/mysql-case/case/mysql"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "mysql-case",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "Mysql/JDBI/PreparedStatement/execute",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "sql"
                },
                {
                  "key": "db.instance",
                  "value": "test"
                },
                {
                  "key": "db.statement",
                  "value": "CREATE TABLE test_007(\nid VARCHAR(1) PRIMARY KEY, \nvalue VARCHAR(1) NOT NULL)"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "5",
              "isError": false,
              "spanType": "Exit",
              "peer": "mysql-server:3306",
              "peerId": "eq 0"
            },
            {
              "operationName": "Mysql/JDBI/CallableStatement/prepareCall",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "2",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "sql"
                },
                {
                  "key": "db.instance",
                  "value": "test"
                },
                {
                  "key": "db.statement",
                  "value": "INSERT INTO test_007(id, value) VALUES(?,?)"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "5",
              "isError": false,
              "spanType": "Exit",
              "peer": "mysql-server:3306",
              "peerId": "eq 0"
            },
            {
              "operationName": "Mysql/JDBI/Statement/execute",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "3",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "sql"
                },
                {
                  "key": "db.instance",
                  "value": "test"
                },
                {
                  "key": "db.statement",
                  "value": "DROP table test_007"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "5",
              "isError": false,
              "spanType": "Exit",
              "peer": "mysql-server:3306",
              "peerId": "eq 0"
            },
            {
              "operationName": "Mysql/JDBI/Connection/close",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "4",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "sql"
                },
                {
                  "key": "db.instance",
                  "value": "test"
                },
                {
                  "key": "db.statement",
                  "value": ""
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "5",
              "isError": false,
              "spanType": "Exit",
              "peer": "mysql-server:3306",
              "peerId": "eq 0"
            },
            {
              "operationName": "/mysql-case/case/mysql",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/mysql-case/case/mysql"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "1",
              "isError": false,
              "spanType": "Entry",
              "peerId": "eq 0"
            }
          ]
        }
      ]
    }
  ]
}
[2017-12-15 07:24:31:192] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:13) - actual data:
{
  "registryItems": {
    "applications": [
      {
        "mysql-case": 2
      }
    ],
    "instances": [
      {
        "mysql-case": 1
      }
    ],
    "operationNames": [
      {
        "mysql-case": [
          "Mysql/JDBI/Connection/close",
          "Mysql/JDBI/Statement/execute",
          "Mysql/JDBI/PreparedStatement/execute",
          "Mysql/JDBI/CallableStatement/execute",
          "/mysql-case/case/mysql"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "mysql-case",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "1.34.15132936009660000",
          "spans": [
            {
              "operationName": "Mysql/JDBI/PreparedStatement/execute",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "sql"
                },
                {
                  "key": "db.instance",
                  "value": "test"
                },
                {
                  "key": "db.statement",
                  "value": "CREATE TABLE test_007(\nid VARCHAR(1) PRIMARY KEY, \nvalue VARCHAR(1) NOT NULL)"
                }
              ],
              "startTime": "1513293603080",
              "endTime": "1513293603102",
              "componentId": "5",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "mysql-server:3306",
              "peerId": "0"
            },
            {
              "operationName": "Mysql/JDBI/CallableStatement/execute",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "2",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "sql"
                },
                {
                  "key": "db.instance",
                  "value": "test"
                },
                {
                  "key": "db.statement",
                  "value": "INSERT INTO test_007(id, value) VALUES(?,?)"
                }
              ],
              "startTime": "1513293603121",
              "endTime": "1513293603124",
              "componentId": "5",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "mysql-server:3306",
              "peerId": "0"
            },
            {
              "operationName": "Mysql/JDBI/Statement/execute",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "3",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "sql"
                },
                {
                  "key": "db.instance",
                  "value": "test"
                },
                {
                  "key": "db.statement",
                  "value": "DROP table test_007"
                }
              ],
              "startTime": "1513293603125",
              "endTime": "1513293603132",
              "componentId": "5",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "mysql-server:3306",
              "peerId": "0"
            },
            {
              "operationName": "Mysql/JDBI/Connection/close",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "4",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "sql"
                },
                {
                  "key": "db.instance",
                  "value": "test"
                },
                {
                  "key": "db.statement",
                  "value": ""
                }
              ],
              "startTime": "1513293603139",
              "endTime": "1513293603140",
              "componentId": "5",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "mysql-server:3306",
              "peerId": "0"
            },
            {
              "operationName": "/mysql-case/case/mysql",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/mysql-case/case/mysql"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "startTime": "1513293600971",
              "endTime": "1513293603140",
              "componentId": "1",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        }
      ]
    }
  ]
}
[2017-12-15 07:24:31:192] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:12) - registry applications assert successful.
[2017-12-15 07:24:31:193] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:14) - registry instances assert successful.
[2017-12-15 07:24:31:193] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:16) - registry operation name assert successful.
[2017-12-15 07:24:31:193] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:193] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:16) - segment items assert successful.
[2017-12-15 07:24:31:194] [INFO] - org.skywalking.apm.test.agent.tool.entity.TestCaseDesc$Parser.parse(TestCaseDesc.java:41) - load case desc: caseName[opentracing-case], caseRequestURL[http://localhost:18080/opentracing-case/case/open-tracing], components[[org.skywalking.apm.test.agent.tool.entity.TestCase$Component@6ad3381f, org.skywalking.apm.test.agent.tool.entity.TestCase$Component@53dbe163]], isValidate[true]
[2017-12-15 07:24:31:194] [INFO] - org.skywalking.apm.test.agent.tool.Main.main(Main.java:44) - start to assert data of test case[opentracing-case]
[2017-12-15 07:24:31:204] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:12) - excepted data:
{
  "registryItems": {
    "applications": [
      {
        "open-tracing-case": "nq 0"
      }
    ],
    "instances": [
      {
        "open-tracing-case": 1
      }
    ],
    "operationNames": [
      {
        "open-tracing-case": [
          "/opentracing-case/case/open-tracing",
          "OpentracingCase/doGet",
          "OpentracingCase/testContinuation",
          "OpentracingCase/testLocalSpan"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "open-tracing-case",
      "segmentSize": "2",
      "segments": [
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "OpentracingCase/testContinuation",
              "operationId": "eq 0",
              "parentSpanId": "2",
              "spanId": "3",
              "tags": [
                {
                  "key": "name",
                  "value": "test"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "eq 0",
              "isError": false,
              "spanType": "Local",
              "peerId": "eq 0"
            },
            {
              "operationName": "OpentracingCase/testLocalSpan",
              "operationId": "eq 0",
              "parentSpanId": "1",
              "spanId": "2",
              "tags": [
                {
                  "key": "name",
                  "value": "Test"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "eq 0",
              "componentName": "OpentracingService",
              "isError": false,
              "spanType": "Local",
              "peerId": "eq 0"
            },
            {
              "operationName": "OpentracingCase/doGet",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "1",
              "tags": [],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "eq 0",
              "isError": false,
              "spanType": "Local",
              "peerId": "eq 0"
            },
            {
              "operationName": "/opentracing-case/case/open-tracing",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/opentracing-case/case/open-tracing"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "1",
              "isError": false,
              "spanType": "Entry",
              "peerId": "eq 0"
            }
          ]
        },
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "OpentracingCase/run",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "tags": [],
              "logs": [],
              "refs": [
                {
                  "parentSpanId": 3,
                  "parentTraceSegmentId": "${open-tracing-case[0]}",
                  "entryServiceName": "/opentracing-case/case/open-tracing",
                  "networkAddress": "",
                  "parentServiceName": "/opentracing-case/case/open-tracing",
                  "entryApplicationInstanceId": "nq 0"
                }
              ],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "eq 0",
              "isError": false,
              "spanType": "Local",
              "peerId": "eq 0"
            }
          ]
        }
      ]
    }
  ]
}
[2017-12-15 07:24:31:206] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:13) - actual data:
{
  "registryItems": {
    "applications": [
      {
        "open-tracing-case": 2
      }
    ],
    "instances": [
      {
        "open-tracing-case": 1
      }
    ],
    "operationNames": [
      {
        "open-tracing-case": [
          "OpentracingCase/doGet",
          "Thread/Thread-5",
          "OpentracingCase/testContinuation",
          "OpentracingCase/testLocalSpan",
          "/opentracing-case/case/open-tracing"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "open-tracing-case",
      "segmentSize": "2",
      "segments": [
        {
          "segmentId": "1.71.15132936760180000",
          "spans": [
            {
              "operationName": "OpentracingCase/run",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Unknown",
              "refs": [
                {
                  "parentServiceId": 0,
                  "parentServiceName": "/opentracing-case/case/open-tracing",
                  "networkAddressId": 0,
                  "entryServiceId": 0,
                  "refType": "CrossThread",
                  "parentSpanId": 3,
                  "parentTraceSegmentId": "1.34.15132936758560000",
                  "parentApplicationInstanceId": 0,
                  "networkAddress": "",
                  "entryServiceName": "/opentracing-case/case/open-tracing",
                  "entryApplicationInstanceId": 1
                }
              ],
              "startTime": "1513293676018",
              "endTime": "1513293677022",
              "componentId": "0",
              "componentName": "",
              "isError": false,
              "spanType": "Local",
              "peer": "",
              "peerId": "0"
            }
          ]
        },
        {
          "segmentId": "1.34.15132936758560000",
          "spans": [
            {
              "operationName": "OpentracingCase/testContinuation",
              "operationId": "0",
              "parentSpanId": "2",
              "spanId": "3",
              "spanLayer": "Unknown",
              "tags": [
                {
                  "key": "name",
                  "value": "test"
                }
              ],
              "startTime": "1513293676001",
              "endTime": "1513293676017",
              "componentId": "0",
              "componentName": "",
              "isError": false,
              "spanType": "Local",
              "peer": "",
              "peerId": "0"
            },
            {
              "operationName": "OpentracingCase/testLocalSpan",
              "operationId": "0",
              "parentSpanId": "1",
              "spanId": "2",
              "spanLayer": "Unknown",
              "tags": [
                {
                  "key": "name",
                  "value": "Test"
                }
              ],
              "startTime": "1513293676001",
              "endTime": "1513293676017",
              "componentId": "0",
              "componentName": "OpentracingService",
              "isError": false,
              "spanType": "Local",
              "peer": "",
              "peerId": "0"
            },
            {
              "operationName": "OpentracingCase/doGet",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Unknown",
              "startTime": "1513293675998",
              "endTime": "1513293678018",
              "componentId": "0",
              "componentName": "",
              "isError": false,
              "spanType": "Local",
              "peer": "",
              "peerId": "0"
            },
            {
              "operationName": "/opentracing-case/case/open-tracing",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/opentracing-case/case/open-tracing"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "startTime": "1513293675861",
              "endTime": "1513293678026",
              "componentId": "1",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        }
      ]
    }
  ]
}
[2017-12-15 07:24:31:207] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:12) - registry applications assert successful.
[2017-12-15 07:24:31:207] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:14) - registry instances assert successful.
[2017-12-15 07:24:31:207] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:16) - registry operation name assert successful.
[2017-12-15 07:24:31:207] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:46) - excepted span size are not equals actual span size, ignore this segment.
[2017-12-15 07:24:31:207] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:208] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:208] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:16) - segment items assert successful.
[2017-12-15 07:24:31:208] [INFO] - org.skywalking.apm.test.agent.tool.entity.TestCaseDesc$Parser.parse(TestCaseDesc.java:41) - load case desc: caseName[spring-plugin-sync], caseRequestURL[http://localhost:8080/sync], components[[org.skywalking.apm.test.agent.tool.entity.TestCase$Component@5066d65f, org.skywalking.apm.test.agent.tool.entity.TestCase$Component@4233e892]], isValidate[true]
[2017-12-15 07:24:31:209] [INFO] - org.skywalking.apm.test.agent.tool.Main.main(Main.java:44) - start to assert data of test case[spring-plugin-sync]
[2017-12-15 07:24:31:223] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:12) - excepted data:
{
  "registryItems": {
    "applications": [
      {
        "spring-case": "nq 0"
      }
    ],
    "instances": [
      {
        "spring-case": "nq 0"
      }
    ],
    "operationNames": [
      {
        "spring-case": [
          "/rest/1",
          "/rest/",
          "/sync",
          "/rest/{id}"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "spring-case",
      "segmentSize": "5",
      "segments": [
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "/rest/",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/"
                },
                {
                  "key": "http.method",
                  "value": "POST"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "13",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "localhost:8080",
              "peerId": "0"
            },
            {
              "operationName": "/rest/1",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "2",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "13",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "localhost:8080",
              "peerId": "0"
            },
            {
              "operationName": "/rest/1",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "3",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "PUT"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "13",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "localhost:8080",
              "peerId": "0"
            },
            {
              "operationName": "/rest/1",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "4",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "DELETE"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "13",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "localhost:8080",
              "peerId": "0"
            },
            {
              "operationName": "/sync",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/sync"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        },
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "/rest/",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/"
                },
                {
                  "key": "http.method",
                  "value": "POST"
                }
              ],
              "logs": [],
              "refs": [
                {
                  "parentServiceId": 0,
                  "parentServiceName": "/sync",
                  "networkAddressId": 0,
                  "entryServiceId": 0,
                  "refType": "CrossProcess",
                  "parentSpanId": 1,
                  "parentTraceSegmentId": "${spring-case[0]}",
                  "parentApplicationInstanceId": "nq 0",
                  "networkAddress": "localhost:8080",
                  "entryServiceName": "/sync",
                  "entryApplicationInstanceId": "nq 0"
                }
              ],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        },
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "/rest/{id}",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "refs": [
                {
                  "parentServiceId": 0,
                  "parentServiceName": "/sync",
                  "networkAddressId": 0,
                  "entryServiceId": 0,
                  "refType": "CrossProcess",
                  "parentSpanId": 2,
                  "parentTraceSegmentId": "${spring-case[0]}",
                  "parentApplicationInstanceId": "nq 0",
                  "networkAddress": "localhost:8080",
                  "entryServiceName": "/sync",
                  "entryApplicationInstanceId": "nq 0"
                }
              ],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        },
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "/rest/{id}",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "PUT"
                }
              ],
              "logs": [],
              "refs": [
                {
                  "parentServiceId": 0,
                  "parentServiceName": "/sync",
                  "networkAddressId": 0,
                  "entryServiceId": 0,
                  "refType": "CrossProcess",
                  "parentSpanId": 3,
                  "parentTraceSegmentId": "${spring-case[0]}",
                  "parentApplicationInstanceId": "nq 0",
                  "networkAddress": "localhost:8080",
                  "entryServiceName": "/sync",
                  "entryApplicationInstanceId": "nq 0"
                }
              ],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        },
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "/rest/{id}",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "DELETE"
                }
              ],
              "logs": [],
              "refs": [
                {
                  "parentServiceId": 0,
                  "parentServiceName": "/sync",
                  "networkAddressId": 0,
                  "entryServiceId": 0,
                  "refType": "CrossProcess",
                  "parentSpanId": 4,
                  "parentTraceSegmentId": "${spring-case[0]}",
                  "parentApplicationInstanceId": "nq 0",
                  "networkAddress": "localhost:8080",
                  "entryServiceName": "/sync",
                  "entryApplicationInstanceId": "nq 0"
                }
              ],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        }
      ]
    }
  ]
}
[2017-12-15 07:24:31:229] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:13) - actual data:
{
  "registryItems": {
    "applications": [
      {
        "spring-case": 2
      }
    ],
    "instances": [
      {
        "spring-case": 1
      }
    ],
    "operationNames": [
      {
        "spring-case": [
          "/rest/1",
          "/rest/",
          "/sync",
          "/rest/{id}"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "spring-case",
      "segmentSize": "5",
      "segments": [
        {
          "segmentId": "1.54.15132937510200000",
          "spans": [
            {
              "operationName": "/rest/",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/"
                },
                {
                  "key": "http.method",
                  "value": "POST"
                }
              ],
              "refs": [
                {
                  "parentServiceId": 0,
                  "parentServiceName": "/sync",
                  "networkAddressId": 0,
                  "entryServiceId": 0,
                  "refType": "CrossProcess",
                  "parentSpanId": 1,
                  "parentTraceSegmentId": "1.53.15132937507640000",
                  "parentApplicationInstanceId": 1,
                  "networkAddress": "localhost:8080",
                  "entryServiceName": "/sync",
                  "entryApplicationInstanceId": 1
                }
              ],
              "startTime": "1513293751020",
              "endTime": "1513293751070",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        },
        {
          "segmentId": "1.56.15132937510790000",
          "spans": [
            {
              "operationName": "/rest/{id}",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "refs": [
                {
                  "parentServiceId": 0,
                  "parentServiceName": "/sync",
                  "networkAddressId": 0,
                  "entryServiceId": 0,
                  "refType": "CrossProcess",
                  "parentSpanId": 2,
                  "parentTraceSegmentId": "1.53.15132937507640000",
                  "parentApplicationInstanceId": 1,
                  "networkAddress": "localhost:8080",
                  "entryServiceName": "/sync",
                  "entryApplicationInstanceId": 1
                }
              ],
              "startTime": "1513293751079",
              "endTime": "1513293751093",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        },
        {
          "segmentId": "1.57.15132937511010000",
          "spans": [
            {
              "operationName": "/rest/{id}",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "PUT"
                }
              ],
              "refs": [
                {
                  "parentServiceId": 0,
                  "parentServiceName": "/sync",
                  "networkAddressId": 0,
                  "entryServiceId": 0,
                  "refType": "CrossProcess",
                  "parentSpanId": 3,
                  "parentTraceSegmentId": "1.53.15132937507640000",
                  "parentApplicationInstanceId": 1,
                  "networkAddress": "localhost:8080",
                  "entryServiceName": "/sync",
                  "entryApplicationInstanceId": 1
                }
              ],
              "startTime": "1513293751101",
              "endTime": "1513293751106",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        },
        {
          "segmentId": "1.58.15132937511080000",
          "spans": [
            {
              "operationName": "/rest/{id}",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "DELETE"
                }
              ],
              "refs": [
                {
                  "parentServiceId": 0,
                  "parentServiceName": "/sync",
                  "networkAddressId": 0,
                  "entryServiceId": 0,
                  "refType": "CrossProcess",
                  "parentSpanId": 4,
                  "parentTraceSegmentId": "1.53.15132937507640000",
                  "parentApplicationInstanceId": 1,
                  "networkAddress": "localhost:8080",
                  "entryServiceName": "/sync",
                  "entryApplicationInstanceId": 1
                }
              ],
              "startTime": "1513293751108",
              "endTime": "1513293751112",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        },
        {
          "segmentId": "1.53.15132937507640000",
          "spans": [
            {
              "operationName": "/rest/",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/"
                },
                {
                  "key": "http.method",
                  "value": "POST"
                }
              ],
              "startTime": "1513293750883",
              "endTime": "1513293751075",
              "componentId": "13",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "localhost:8080",
              "peerId": "0"
            },
            {
              "operationName": "/rest/1",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "2",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "startTime": "1513293751077",
              "endTime": "1513293751098",
              "componentId": "13",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "localhost:8080",
              "peerId": "0"
            },
            {
              "operationName": "/rest/1",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "3",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "PUT"
                }
              ],
              "startTime": "1513293751098",
              "endTime": "1513293751106",
              "componentId": "13",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "localhost:8080",
              "peerId": "0"
            },
            {
              "operationName": "/rest/1",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "4",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "DELETE"
                }
              ],
              "startTime": "1513293751107",
              "endTime": "1513293751113",
              "componentId": "13",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "localhost:8080",
              "peerId": "0"
            },
            {
              "operationName": "/sync",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/sync"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "startTime": "1513293750769",
              "endTime": "1513293751137",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        }
      ]
    }
  ]
}
[2017-12-15 07:24:31:230] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:12) - registry applications assert successful.
[2017-12-15 07:24:31:230] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:14) - registry instances assert successful.
[2017-12-15 07:24:31:230] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:16) - registry operation name assert successful.
[2017-12-15 07:24:31:230] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:46) - excepted span size are not equals actual span size, ignore this segment.
[2017-12-15 07:24:31:231] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:46) - excepted span size are not equals actual span size, ignore this segment.
[2017-12-15 07:24:31:231] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:46) - excepted span size are not equals actual span size, ignore this segment.
[2017-12-15 07:24:31:231] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:46) - excepted span size are not equals actual span size, ignore this segment.
[2017-12-15 07:24:31:231] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:231] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:231] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:232] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:57) - span[/rest/{id}] are not equal ignore this segment. 
tags: 
 expected: http://localhost:8080/rest/1
 actual: http://localhost:8080/rest/
[2017-12-15 07:24:31:232] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:232] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:232] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:57) - span[/rest/{id}] are not equal ignore this segment. 
tags: 
 expected: http://localhost:8080/rest/1
 actual: http://localhost:8080/rest/
[2017-12-15 07:24:31:233] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:233] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:57) - span[/rest/{id}] are not equal ignore this segment. 
tags: 
 expected: PUT
 actual: GET
[2017-12-15 07:24:31:233] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:233] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:233] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:57) - span[/rest/{id}] are not equal ignore this segment. 
tags: 
 expected: http://localhost:8080/rest/1
 actual: http://localhost:8080/rest/
[2017-12-15 07:24:31:233] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:234] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:57) - span[/rest/{id}] are not equal ignore this segment. 
tags: 
 expected: DELETE
 actual: GET
[2017-12-15 07:24:31:234] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:234] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:57) - span[/rest/{id}] are not equal ignore this segment. 
tags: 
 expected: DELETE
 actual: PUT
[2017-12-15 07:24:31:234] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:234] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:16) - segment items assert successful.
[2017-12-15 07:24:31:235] [INFO] - org.skywalking.apm.test.agent.tool.entity.TestCaseDesc$Parser.parse(TestCaseDesc.java:41) - load case desc: caseName[@trace-case], caseRequestURL[http://localhost:18080/trace-activation-case/trace-activation], components[[org.skywalking.apm.test.agent.tool.entity.TestCase$Component@6fefce9e, org.skywalking.apm.test.agent.tool.entity.TestCase$Component@4f8969b0]], isValidate[true]
[2017-12-15 07:24:31:235] [INFO] - org.skywalking.apm.test.agent.tool.Main.main(Main.java:44) - start to assert data of test case[@trace-case]
[2017-12-15 07:24:31:242] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:12) - excepted data:
{
  "registryItems": {
    "applications": [
      {
        "trace-activation-case": "nq 0"
      }
    ],
    "instances": [
      {
        "trace-activation-case": 1
      }
    ],
    "operationNames": [
      {
        "trace-activation-case": [
          "/trace-activation",
          "org.skywalking.apm.testcase.trace.annotation.service.CaseService.queryUser(java.lang.String)",
          "updateUser"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "trace-activation-case",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "org.skywalking.apm.testcase.trace.annotation.service.CaseService.queryUser(java.lang.String)",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Unknown",
              "tags": [
                {
                  "key": "user.id",
                  "value": "201708180001"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "0",
              "isError": false,
              "spanType": "Local",
              "peer": "",
              "peerId": "eq 0"
            },
            {
              "operationName": "updateUser",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "2",
              "spanLayer": "Unknown",
              "tags": [],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "0",
              "isError": false,
              "spanType": "Local",
              "peer": "",
              "peerId": "eq 0"
            },
            {
              "operationName": "/trace-activation",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/trace-activation-case/trace-activation"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "14",
              "isError": false,
              "spanType": "Entry",
              "peerId": "eq 0"
            }
          ]
        }
      ]
    }
  ]
}
[2017-12-15 07:24:31:243] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:13) - actual data:
{
  "registryItems": {
    "applications": [
      {
        "trace-activation-case": 2
      }
    ],
    "instances": [
      {
        "trace-activation-case": 1
      }
    ],
    "operationNames": [
      {
        "trace-activation-case": [
          "org.skywalking.apm.testcase.trace.annotation.service.CaseService.queryUser(java.lang.String)",
          "/trace-activation",
          "updateUser"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "trace-activation-case",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "1.53.15132938332970000",
          "spans": [
            {
              "operationName": "org.skywalking.apm.testcase.trace.annotation.service.CaseService.queryUser(java.lang.String)",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Unknown",
              "tags": [
                {
                  "key": "user.id",
                  "value": "201708180001"
                }
              ],
              "startTime": "1513293833375",
              "endTime": "1513293834397",
              "componentId": "0",
              "componentName": "",
              "isError": false,
              "spanType": "Local",
              "peer": "",
              "peerId": "0"
            },
            {
              "operationName": "updateUser",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "2",
              "spanLayer": "Unknown",
              "startTime": "1513293834397",
              "endTime": "1513293834397",
              "componentId": "0",
              "componentName": "",
              "isError": false,
              "spanType": "Local",
              "peer": "",
              "peerId": "0"
            },
            {
              "operationName": "/trace-activation",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/trace-activation-case/trace-activation"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "startTime": "1513293833303",
              "endTime": "1513293834435",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ]
        }
      ]
    }
  ]
}
[2017-12-15 07:24:31:244] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:12) - registry applications assert successful.
[2017-12-15 07:24:31:244] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:14) - registry instances assert successful.
[2017-12-15 07:24:31:244] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:16) - registry operation name assert successful.
[2017-12-15 07:24:31:244] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:50) - excepted span size is equals actual span size, begin to assert span.
[2017-12-15 07:24:31:244] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:16) - segment items assert successful.
2017-12-15 07:24:31,399 pool-1-thread-1 DEBUG Stopping LoggerContext[name=55f96302, org.apache.logging.log4j.core.LoggerContext@5c5eefef]
2017-12-15 07:24:31,400 pool-1-thread-1 DEBUG Stopping LoggerContext[name=55f96302, org.apache.logging.log4j.core.LoggerContext@5c5eefef]...
2017-12-15 07:24:31,401 pool-1-thread-1 DEBUG Shutting down OutputStreamManager SYSTEM_OUT.false.false
2017-12-15 07:24:31,402 pool-1-thread-1 DEBUG Shut down OutputStreamManager SYSTEM_OUT.false.false, all resources released: true
2017-12-15 07:24:31,402 pool-1-thread-1 DEBUG Appender Console stopped with status true
2017-12-15 07:24:31,402 pool-1-thread-1 DEBUG Stopped XmlConfiguration[location=jar:file:/home/sw_test/.jenkins/workspace/automatic_test/workspace/skywalking-autotest.jar!/log4j2.xml] OK
2017-12-15 07:24:31,403 pool-1-thread-1 DEBUG Stopped LoggerContext[name=55f96302, org.apache.logging.log4j.core.LoggerContext@5c5eefef] with status true
