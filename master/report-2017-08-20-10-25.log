2017-08-20 10:37:24,118 main DEBUG Initializing configuration XmlConfiguration[location=jar:file:/Users/xin/workbench/ascrutae/agent-integration-test/workspace/skywalking-autotest.jar!/log4j2.xml]
2017-08-20 10:37:24,123 main DEBUG Installed script engines
2017-08-20 10:37:24,391 main DEBUG Oracle Nashorn Version: 1.8.0_152, Language: ECMAScript, Threading: Not Thread Safe, Compile: true, Names: {nashorn, Nashorn, js, JS, JavaScript, javascript, ECMAScript, ecmascript}
2017-08-20 10:37:24,568 main DEBUG AppleScriptEngine Version: 1.1, Language: AppleScript, Threading: Not Thread Safe, Compile: false, Names: {AppleScriptEngine, AppleScript, OSA}
2017-08-20 10:37:24,569 main DEBUG PluginManager 'Core' found 112 plugins
2017-08-20 10:37:24,569 main DEBUG PluginManager 'Level' found 0 plugins
2017-08-20 10:37:24,572 main DEBUG PluginManager 'Lookup' found 13 plugins
2017-08-20 10:37:24,574 main DEBUG Building Plugin[name=layout, class=org.apache.logging.log4j.core.layout.PatternLayout].
2017-08-20 10:37:24,587 main DEBUG PluginManager 'TypeConverter' found 26 plugins
2017-08-20 10:37:24,600 main DEBUG PatternLayout$Builder(pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %l - %m%n", PatternSelector=null, Configuration(jar:file:/Users/xin/workbench/ascrutae/agent-integration-test/workspace/skywalking-autotest.jar!/log4j2.xml), Replace=null, charset="UTF-8", alwaysWriteExceptions="null", disableAnsi="null", noConsoleNoAnsi="null", header="null", footer="null")
2017-08-20 10:37:24,601 main DEBUG PluginManager 'Converter' found 41 plugins
2017-08-20 10:37:24,613 main DEBUG Building Plugin[name=appender, class=org.apache.logging.log4j.core.appender.ConsoleAppender].
2017-08-20 10:37:24,621 main DEBUG ConsoleAppender$Builder(target="SYSTEM_OUT", follow="null", direct="null", bufferedIo="null", bufferSize="null", immediateFlush="null", ignoreExceptions="null", PatternLayout([%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %l - %m%n), name="Console", Configuration(jar:file:/Users/xin/workbench/ascrutae/agent-integration-test/workspace/skywalking-autotest.jar!/log4j2.xml), Filter=null)
2017-08-20 10:37:24,622 main DEBUG Starting OutputStreamManager SYSTEM_OUT.false.false
2017-08-20 10:37:24,622 main DEBUG Building Plugin[name=appenders, class=org.apache.logging.log4j.core.config.AppendersPlugin].
2017-08-20 10:37:24,623 main DEBUG createAppenders(={Console})
2017-08-20 10:37:24,624 main DEBUG Building Plugin[name=AppenderRef, class=org.apache.logging.log4j.core.config.AppenderRef].
2017-08-20 10:37:24,630 main DEBUG createAppenderRef(ref="Console", level="null", Filter=null)
2017-08-20 10:37:24,630 main DEBUG Building Plugin[name=root, class=org.apache.logging.log4j.core.config.LoggerConfig$RootLogger].
2017-08-20 10:37:24,632 main DEBUG createLogger(additivity="null", level="DEBUG", includeLocation="null", ={Console}, ={}, Configuration(jar:file:/Users/xin/workbench/ascrutae/agent-integration-test/workspace/skywalking-autotest.jar!/log4j2.xml), Filter=null)
2017-08-20 10:37:24,635 main DEBUG Building Plugin[name=loggers, class=org.apache.logging.log4j.core.config.LoggersPlugin].
2017-08-20 10:37:24,635 main DEBUG createLoggers(={root})
2017-08-20 10:37:24,636 main DEBUG Configuration XmlConfiguration[location=jar:file:/Users/xin/workbench/ascrutae/agent-integration-test/workspace/skywalking-autotest.jar!/log4j2.xml] initialized
2017-08-20 10:37:24,636 main DEBUG Starting configuration XmlConfiguration[location=jar:file:/Users/xin/workbench/ascrutae/agent-integration-test/workspace/skywalking-autotest.jar!/log4j2.xml]
2017-08-20 10:37:24,636 main DEBUG Started configuration XmlConfiguration[location=jar:file:/Users/xin/workbench/ascrutae/agent-integration-test/workspace/skywalking-autotest.jar!/log4j2.xml] OK.
2017-08-20 10:37:24,637 main DEBUG Shutting down OutputStreamManager SYSTEM_OUT.false.false-1
2017-08-20 10:37:24,637 main DEBUG Shut down OutputStreamManager SYSTEM_OUT.false.false-1, all resources released: true
2017-08-20 10:37:24,638 main DEBUG Appender DefaultConsole-1 stopped with status true
2017-08-20 10:37:24,638 main DEBUG Stopped org.apache.logging.log4j.core.config.DefaultConfiguration@619a5dff OK
2017-08-20 10:37:24,692 main DEBUG Registering MBean org.apache.logging.log4j2:type=4b67cf4d
2017-08-20 10:37:24,695 main DEBUG Registering MBean org.apache.logging.log4j2:type=4b67cf4d,component=StatusLogger
2017-08-20 10:37:24,696 main DEBUG Registering MBean org.apache.logging.log4j2:type=4b67cf4d,component=ContextSelector
2017-08-20 10:37:24,697 main DEBUG Registering MBean org.apache.logging.log4j2:type=4b67cf4d,component=Loggers,name=
2017-08-20 10:37:24,698 main DEBUG Registering MBean org.apache.logging.log4j2:type=4b67cf4d,component=Appenders,name=Console
2017-08-20 10:37:24,700 main DEBUG Reconfiguration complete for context[name=4b67cf4d] at URI jar:file:/Users/xin/workbench/ascrutae/agent-integration-test/workspace/skywalking-autotest.jar!/log4j2.xml (org.apache.logging.log4j.core.LoggerContext@2f9f7dcf) with optional ClassLoader: null
2017-08-20 10:37:24,700 main DEBUG Shutdown hook enabled. Registering a new one.
2017-08-20 10:37:24,701 main DEBUG LoggerContext[name=4b67cf4d, org.apache.logging.log4j.core.LoggerContext@2f9f7dcf] started OK.
[2017-08-20 10:37:24:705] [INFO] - org.skywalking.apm.test.agent.tool.Main.main(Main.java:19) - Begin to validate data.
[2017-08-20 10:37:24:708] [INFO] - org.skywalking.apm.test.agent.tool.entity.TestCaseDesc$Parser.parse(TestCaseDesc.java:41) - load case desc: caseName[dubbox-rest-case], caseRequestURL[http://localhost:18080/dubbox-case/case/dubbox-rest], components[[org.skywalking.apm.test.agent.tool.entity.TestCase$Component@6302bbb1, org.skywalking.apm.test.agent.tool.entity.TestCase$Component@31304f14]], isValidate[true]
[2017-08-20 10:37:24:713] [INFO] - org.skywalking.apm.test.agent.tool.Main.main(Main.java:44) - start to assert data of test case[dubbox-rest-case]
[2017-08-20 10:37:24:852] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:12) - excepted data:
{
  "registryItems": {
    "applications": [
      {
        "dubbox-provider": "nq 0"
      },
      {
        "dubbox-consumer": "nq 0"
      }
    ],
    "instances": [
      {
        "dubbox-provider": 1
      },
      {
        "dubbox-consumer": 1
      }
    ],
    "operationNames": [
      {
        "dubbox-consumer": [
          "/dubbox-case/case/dubbox-rest"
        ]
      },
      {
        "dubbox-provider": [
          "org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "dubbox-consumer",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "RPCFramework",
              "tags": [
                {
                  "key": "url",
                  "value": "not null"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "3",
              "isError": false,
              "spanType": "Exit",
              "peer": "not null",
              "peerId": "eq 0"
            },
            {
              "operationName": "/dubbox-case/case/dubbox-rest",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/dubbox-case/case/dubbox-rest"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "1",
              "isError": false,
              "spanType": "Entry",
              "peerId": "eq 0"
            }
          ],
          "refs": [],
          "actualRefs": []
        }
      ]
    },
    {
      "applicationCode": "dubbox-provider",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "tags": [
                {
                  "key": "url",
                  "value": "not null"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "3",
              "isError": false,
              "spanType": "Entry",
              "peerId": "eq 0"
            }
          ],
          "refs": [
            {
              "parentServiceName": "/dubbox-case/case/dubbox-rest",
              "refType": "not null",
              "parentSpanId": "1",
              "parentTraceSegmentId": "${dubbox-consumer[0]}",
              "networkAddress": "not null",
              "entryServiceName": "/dubbox-case/case/dubbox-rest",
              "entryApplicationInstanceId": "nq 0"
            }
          ],
          "actualRefs": []
        }
      ]
    }
  ]
}
[2017-08-20 10:37:24:857] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:13) - actual data:
{
  "registryItems": {
    "applications": [
      {
        "dubbox-provider": 2
      },
      {
        "dubbox-consumer": 3
      },
      {
        "172.25.0.4:20880": 4
      }
    ],
    "instances": [
      {
        "dubbox-provider": 1
      },
      {
        "dubbox-consumer": 1
      }
    ],
    "operationNames": [
      {
        "dubbox-consumer": [
          "org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()",
          "/dubbox-case/case/dubbox-rest"
        ]
      },
      {
        "dubbox-provider": [
          "org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "dubbox-provider",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "13715031961156920000",
          "spans": [
            {
              "operationName": "org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "RPCFramework",
              "tags": [
                {
                  "key": "url",
                  "value": "rest://172.25.0.4:20880/org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()"
                }
              ],
              "logs": [],
              "startTime": "1503196115699",
              "endTime": "1503196117777",
              "componentId": "3",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [
            {
              "parentServiceId": "0",
              "parentServiceName": "/dubbox-case/case/dubbox-rest",
              "networkAddressId": "0",
              "entryServiceId": "0",
              "refType": "CrossProcess",
              "parentSpanId": "1",
              "parentTraceSegmentId": "23015031961129270000",
              "parentApplicationInstanceId": "2",
              "networkAddress": "172.25.0.4:20880",
              "entryServiceName": "/dubbox-case/case/dubbox-rest",
              "entryApplicationInstanceId": "2"
            }
          ],
          "actualRefs": []
        }
      ]
    },
    {
      "applicationCode": "dubbox-consumer",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "23015031961129270000",
          "spans": [
            {
              "operationName": "org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "RPCFramework",
              "tags": [
                {
                  "key": "url",
                  "value": "rest://172.25.0.4:20880/org.skywaking.apm.testcase.dubbo.services.GreetService.doBusiness()"
                }
              ],
              "logs": [],
              "startTime": "1503196115292",
              "endTime": "1503196117858",
              "componentId": "3",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "172.25.0.4:20880",
              "peerId": "0"
            },
            {
              "operationName": "/dubbox-case/case/dubbox-rest",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/dubbox-case/case/dubbox-rest"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "1503196112937",
              "endTime": "1503196117880",
              "componentId": "1",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [],
          "actualRefs": []
        }
      ]
    }
  ]
}
[2017-08-20 10:37:24:859] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:12) - registry applications assert successful.
[2017-08-20 10:37:24:861] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:14) - registry instances assert successful.
[2017-08-20 10:37:24:861] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:16) - registry operation name assert successful.
[2017-08-20 10:37:24:862] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:863] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:864] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:16) - segment items assert successful.
[2017-08-20 10:37:24:864] [INFO] - org.skywalking.apm.test.agent.tool.entity.TestCaseDesc$Parser.parse(TestCaseDesc.java:41) - load case desc: caseName[httpclient-case], caseRequestURL[http://localhost:18080/httpclient-case/case/httpclient], components[[org.skywalking.apm.test.agent.tool.entity.TestCase$Component@2a693f59, org.skywalking.apm.test.agent.tool.entity.TestCase$Component@3f4faf53]], isValidate[true]
[2017-08-20 10:37:24:864] [INFO] - org.skywalking.apm.test.agent.tool.Main.main(Main.java:44) - start to assert data of test case[httpclient-case]
[2017-08-20 10:37:24:882] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:12) - excepted data:
{
  "registryItems": {
    "applications": [
      {
        "httpclient-case": "nq 0"
      }
    ],
    "instances": [
      {
        "httpclient-case": 1
      }
    ],
    "operationNames": [
      {
        "httpclient-case": [
          "/httpclient-case/case/httpclient",
          "/httpclient-case/case/context-propagate"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "httpclient-case",
      "segmentSize": "2",
      "segments": [
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "/httpclient-case/case/context-propagate",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://127.0.0.1:8080/httpclient-case/case/context-propagate"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "eq 2",
              "isError": false,
              "spanType": "Exit",
              "peerId": "eq 0"
            },
            {
              "operationName": "/httpclient-case/case/httpclient",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/httpclient-case/case/httpclient"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "1",
              "isError": false,
              "spanType": "Entry",
              "peerId": "eq 0"
            }
          ],
          "refs": [],
          "actualRefs": []
        },
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "/httpclient-case/case/context-propagate",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://127.0.0.1:8080/httpclient-case/case/context-propagate"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "1",
              "isError": false,
              "spanType": "Entry",
              "peerId": "eq 0"
            }
          ],
          "refs": [
            {
              "parentServiceName": "/httpclient-case/case/httpclient",
              "parentSpanId": "1",
              "parentTraceSegmentId": "${httpclient-case[0]}",
              "networkAddress": "127.0.0.1:8080",
              "entryServiceName": "/httpclient-case/case/httpclient",
              "entryApplicationInstanceId": "nq 0"
            }
          ],
          "actualRefs": []
        }
      ]
    }
  ]
}
[2017-08-20 10:37:24:885] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:13) - actual data:
{
  "registryItems": {
    "applications": [
      {
        "httpclient-case": 2
      }
    ],
    "instances": [
      {
        "httpclient-case": 1
      }
    ],
    "operationNames": [
      {
        "httpclient-case": [
          "/httpclient-case/case/httpclient",
          "/httpclient-case/case/context-propagate"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "httpclient-case",
      "segmentSize": "2",
      "segments": [
        {
          "segmentId": "12915031962060570000",
          "spans": [
            {
              "operationName": "/httpclient-case/case/context-propagate",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://127.0.0.1:8080/httpclient-case/case/context-propagate"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "1503196206059",
              "endTime": "1503196206072",
              "componentId": "1",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [
            {
              "parentServiceId": "0",
              "parentServiceName": "/httpclient-case/case/httpclient",
              "networkAddressId": "0",
              "entryServiceId": "0",
              "refType": "CrossProcess",
              "parentSpanId": "1",
              "parentTraceSegmentId": "12815031962056260000",
              "parentApplicationInstanceId": "1",
              "networkAddress": "127.0.0.1:8080",
              "entryServiceName": "/httpclient-case/case/httpclient",
              "entryApplicationInstanceId": "1"
            }
          ],
          "actualRefs": []
        },
        {
          "segmentId": "12815031962056260000",
          "spans": [
            {
              "operationName": "/httpclient-case/case/context-propagate",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://127.0.0.1:8080/httpclient-case/case/context-propagate"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "1503196205923",
              "endTime": "1503196206100",
              "componentId": "2",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "127.0.0.1:8080",
              "peerId": "0"
            },
            {
              "operationName": "/httpclient-case/case/httpclient",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/httpclient-case/case/httpclient"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "1503196205635",
              "endTime": "1503196206103",
              "componentId": "1",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [],
          "actualRefs": []
        }
      ]
    }
  ]
}
[2017-08-20 10:37:24:885] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:12) - registry applications assert successful.
[2017-08-20 10:37:24:885] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:14) - registry instances assert successful.
[2017-08-20 10:37:24:885] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:16) - registry operation name assert successful.
[2017-08-20 10:37:24:885] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:886] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:886] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:16) - segment items assert successful.
[2017-08-20 10:37:24:886] [INFO] - org.skywalking.apm.test.agent.tool.entity.TestCaseDesc$Parser.parse(TestCaseDesc.java:41) - load case desc: caseName[jedis-standalone-case], caseRequestURL[http://localhost:18080/jedis-standalone-case/case/jedis-standalone], components[[org.skywalking.apm.test.agent.tool.entity.TestCase$Component@4b2c5e02, org.skywalking.apm.test.agent.tool.entity.TestCase$Component@57a3e26a]], isValidate[true]
[2017-08-20 10:37:24:886] [INFO] - org.skywalking.apm.test.agent.tool.Main.main(Main.java:44) - start to assert data of test case[jedis-standalone-case]
[2017-08-20 10:37:24:903] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:12) - excepted data:
{
  "registryItems": {
    "applications": [
      {
        "jedis-standalone-case": "nq 0"
      }
    ],
    "instances": [
      {
        "jedis-standalone-case": 1
      }
    ],
    "operationNames": [
      {
        "jedis-standalone-case": [
          "/jedis-standalone-case/case/jedis-standalone"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "jedis-standalone-case",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "Jedis/set",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "Redis"
                },
                {
                  "key": "db.statement",
                  "value": "set a"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "7",
              "isError": false,
              "spanType": "Exit",
              "peer": "redis-server:6379",
              "peerId": "eq 0"
            },
            {
              "operationName": "Jedis/get",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "2",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "Redis"
                },
                {
                  "key": "db.statement",
                  "value": "get a"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "7",
              "isError": false,
              "spanType": "Exit",
              "peer": "redis-server:6379",
              "peerId": "eq 0"
            },
            {
              "operationName": "Jedis/del",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "3",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "Redis"
                },
                {
                  "key": "db.statement",
                  "value": "del a"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "7",
              "isError": false,
              "spanType": "Exit",
              "peer": "redis-server:6379",
              "peerId": "eq 0"
            },
            {
              "operationName": "/jedis-standalone-case/case/jedis-standalone",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/jedis-standalone-case/case/jedis-standalone"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "1",
              "isError": false,
              "spanType": "Entry",
              "peerId": "eq 0"
            }
          ],
          "refs": [],
          "actualRefs": []
        }
      ]
    }
  ]
}
[2017-08-20 10:37:24:906] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:13) - actual data:
{
  "registryItems": {
    "applications": [
      {
        "redis-server:6379": 3
      },
      {
        "jedis-standalone-case": 2
      }
    ],
    "instances": [
      {
        "jedis-standalone-case": 1
      }
    ],
    "operationNames": [
      {
        "jedis-standalone-case": [
          "Jedis/set",
          "/jedis-standalone-case/case/jedis-standalone",
          "Jedis/del",
          "Jedis/get"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "jedis-standalone-case",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "12815031962795300000",
          "spans": [
            {
              "operationName": "Jedis/set",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "Redis"
                },
                {
                  "key": "db.statement",
                  "value": "set a"
                }
              ],
              "logs": [],
              "startTime": "1503196282044",
              "endTime": "1503196282061",
              "componentId": "7",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "redis-server:6379",
              "peerId": "0"
            },
            {
              "operationName": "Jedis/get",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "2",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "Redis"
                },
                {
                  "key": "db.statement",
                  "value": "get a"
                }
              ],
              "logs": [],
              "startTime": "1503196282062",
              "endTime": "1503196282062",
              "componentId": "7",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "redis-server:6379",
              "peerId": "0"
            },
            {
              "operationName": "Jedis/del",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "3",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "Redis"
                },
                {
                  "key": "db.statement",
                  "value": "del a"
                }
              ],
              "logs": [],
              "startTime": "1503196282062",
              "endTime": "1503196282062",
              "componentId": "7",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "redis-server:6379",
              "peerId": "0"
            },
            {
              "operationName": "/jedis-standalone-case/case/jedis-standalone",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/jedis-standalone-case/case/jedis-standalone"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "1503196279539",
              "endTime": "1503196282069",
              "componentId": "1",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [],
          "actualRefs": []
        }
      ]
    }
  ]
}
[2017-08-20 10:37:24:906] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:12) - registry applications assert successful.
[2017-08-20 10:37:24:907] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:14) - registry instances assert successful.
[2017-08-20 10:37:24:907] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:16) - registry operation name assert successful.
[2017-08-20 10:37:24:907] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:907] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:16) - segment items assert successful.
[2017-08-20 10:37:24:908] [INFO] - org.skywalking.apm.test.agent.tool.entity.TestCaseDesc$Parser.parse(TestCaseDesc.java:41) - load case desc: caseName[mysql-case], caseRequestURL[http://localhost:18080/mysql-case/case/mysql], components[[org.skywalking.apm.test.agent.tool.entity.TestCase$Component@f107c50, org.skywalking.apm.test.agent.tool.entity.TestCase$Component@51133c06]], isValidate[true]
[2017-08-20 10:37:24:908] [INFO] - org.skywalking.apm.test.agent.tool.Main.main(Main.java:44) - start to assert data of test case[mysql-case]
[2017-08-20 10:37:24:919] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:12) - excepted data:
{
  "registryItems": {
    "applications": [
      {
        "mysql-case": "nq 0"
      }
    ],
    "instances": [
      {
        "mysql-case": 1
      }
    ],
    "operationNames": [
      {
        "mysql-case": [
          "/mysql-case/case/mysql"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "mysql-case",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "Mysql/JDBI/PreparedStatement/execute",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "sql"
                },
                {
                  "key": "db.instance",
                  "value": "test"
                },
                {
                  "key": "db.statement",
                  "value": "CREATE TABLE test_007(\nid VARCHAR(1) PRIMARY KEY, \nvalue VARCHAR(1) NOT NULL)"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "5",
              "isError": false,
              "spanType": "Exit",
              "peer": "mysql-server:3306",
              "peerId": "eq 0"
            },
            {
              "operationName": "Mysql/JDBI/CallableStatement/prepareCall",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "2",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "sql"
                },
                {
                  "key": "db.instance",
                  "value": "test"
                },
                {
                  "key": "db.statement",
                  "value": "INSERT INTO test_007(id, value) VALUES(?,?)"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "5",
              "isError": false,
              "spanType": "Exit",
              "peer": "mysql-server:3306",
              "peerId": "eq 0"
            },
            {
              "operationName": "Mysql/JDBI/Statement/execute",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "3",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "sql"
                },
                {
                  "key": "db.instance",
                  "value": "test"
                },
                {
                  "key": "db.statement",
                  "value": "DROP table test_007"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "5",
              "isError": false,
              "spanType": "Exit",
              "peer": "mysql-server:3306",
              "peerId": "eq 0"
            },
            {
              "operationName": "Mysql/JDBI/Connection/close",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "4",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "sql"
                },
                {
                  "key": "db.instance",
                  "value": "test"
                },
                {
                  "key": "db.statement",
                  "value": ""
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "5",
              "isError": false,
              "spanType": "Exit",
              "peer": "mysql-server:3306",
              "peerId": "eq 0"
            },
            {
              "operationName": "/mysql-case/case/mysql",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/mysql-case/case/mysql"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "1",
              "isError": false,
              "spanType": "Entry",
              "peerId": "eq 0"
            }
          ],
          "refs": [],
          "actualRefs": []
        }
      ]
    }
  ]
}
[2017-08-20 10:37:24:922] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:13) - actual data:
{
  "registryItems": {
    "applications": [
      {
        "mysql-case": 2
      },
      {
        "mysql-server:3306": 3
      }
    ],
    "instances": [
      {
        "mysql-case": 1
      }
    ],
    "operationNames": [
      {
        "mysql-case": [
          "Mysql/JDBI/Connection/close",
          "Mysql/JDBI/Statement/execute",
          "Mysql/JDBI/PreparedStatement/execute",
          "Mysql/JDBI/CallableStatement/execute",
          "/mysql-case/case/mysql"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "mysql-case",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "12815031963587230000",
          "spans": [
            {
              "operationName": "Mysql/JDBI/PreparedStatement/execute",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "sql"
                },
                {
                  "key": "db.instance",
                  "value": "test"
                },
                {
                  "key": "db.statement",
                  "value": "CREATE TABLE test_007(\nid VARCHAR(1) PRIMARY KEY, \nvalue VARCHAR(1) NOT NULL)"
                }
              ],
              "logs": [],
              "startTime": "1503196360235",
              "endTime": "1503196360418",
              "componentId": "5",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "mysql-server:3306",
              "peerId": "0"
            },
            {
              "operationName": "Mysql/JDBI/CallableStatement/execute",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "2",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "sql"
                },
                {
                  "key": "db.instance",
                  "value": "test"
                },
                {
                  "key": "db.statement",
                  "value": "INSERT INTO test_007(id, value) VALUES(?,?)"
                }
              ],
              "logs": [],
              "startTime": "1503196360444",
              "endTime": "1503196360472",
              "componentId": "5",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "mysql-server:3306",
              "peerId": "0"
            },
            {
              "operationName": "Mysql/JDBI/Statement/execute",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "3",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "sql"
                },
                {
                  "key": "db.instance",
                  "value": "test"
                },
                {
                  "key": "db.statement",
                  "value": "DROP table test_007"
                }
              ],
              "logs": [],
              "startTime": "1503196360477",
              "endTime": "1503196360558",
              "componentId": "5",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "mysql-server:3306",
              "peerId": "0"
            },
            {
              "operationName": "Mysql/JDBI/Connection/close",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "4",
              "spanLayer": "Database",
              "tags": [
                {
                  "key": "db.type",
                  "value": "sql"
                },
                {
                  "key": "db.instance",
                  "value": "test"
                },
                {
                  "key": "db.statement",
                  "value": ""
                }
              ],
              "logs": [],
              "startTime": "1503196360569",
              "endTime": "1503196360570",
              "componentId": "5",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "mysql-server:3306",
              "peerId": "0"
            },
            {
              "operationName": "/mysql-case/case/mysql",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/mysql-case/case/mysql"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "1503196358733",
              "endTime": "1503196360570",
              "componentId": "1",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [],
          "actualRefs": []
        }
      ]
    }
  ]
}
[2017-08-20 10:37:24:922] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:12) - registry applications assert successful.
[2017-08-20 10:37:24:922] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:14) - registry instances assert successful.
[2017-08-20 10:37:24:923] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:16) - registry operation name assert successful.
[2017-08-20 10:37:24:923] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:923] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:16) - segment items assert successful.
[2017-08-20 10:37:24:923] [INFO] - org.skywalking.apm.test.agent.tool.entity.TestCaseDesc$Parser.parse(TestCaseDesc.java:41) - load case desc: caseName[opentracing-case], caseRequestURL[http://localhost:18080/opentracing-case/case/open-tracing], components[[org.skywalking.apm.test.agent.tool.entity.TestCase$Component@74eb909f, org.skywalking.apm.test.agent.tool.entity.TestCase$Component@28ec166e]], isValidate[true]
[2017-08-20 10:37:24:923] [INFO] - org.skywalking.apm.test.agent.tool.Main.main(Main.java:44) - start to assert data of test case[opentracing-case]
[2017-08-20 10:37:24:935] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:12) - excepted data:
{
  "registryItems": {
    "applications": [
      {
        "open-tracing-case": "nq 0"
      }
    ],
    "instances": [
      {
        "open-tracing-case": 1
      }
    ],
    "operationNames": [
      {
        "open-tracing-case": [
          "/opentracing-case/case/open-tracing",
          "OpentracingCase/doGet",
          "OpentracingCase/testContinuation",
          "OpentracingCase/testLocalSpan"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "open-tracing-case",
      "segmentSize": "2",
      "segments": [
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "OpentracingCase/testContinuation",
              "operationId": "eq 0",
              "parentSpanId": "2",
              "spanId": "3",
              "tags": [
                {
                  "key": "name",
                  "value": "test"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "eq 0",
              "isError": false,
              "spanType": "Local",
              "peerId": "eq 0"
            },
            {
              "operationName": "OpentracingCase/testLocalSpan",
              "operationId": "eq 0",
              "parentSpanId": "1",
              "spanId": "2",
              "tags": [
                {
                  "key": "name",
                  "value": "Test"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "eq 0",
              "componentName": "OpentracingService",
              "isError": false,
              "spanType": "Local",
              "peerId": "eq 0"
            },
            {
              "operationName": "OpentracingCase/doGet",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "1",
              "tags": [],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "eq 0",
              "isError": false,
              "spanType": "Local",
              "peerId": "eq 0"
            },
            {
              "operationName": "/opentracing-case/case/open-tracing",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/opentracing-case/case/open-tracing"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "1",
              "isError": false,
              "spanType": "Entry",
              "peerId": "eq 0"
            }
          ],
          "refs": [],
          "actualRefs": []
        },
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "OpentracingCase/run",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "tags": [],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "eq 0",
              "isError": false,
              "spanType": "Local",
              "peerId": "eq 0"
            }
          ],
          "refs": [
            {
              "parentServiceName": "/opentracing-case/case/open-tracing",
              "parentSpanId": "3",
              "parentTraceSegmentId": "${open-tracing-case[0]}",
              "networkAddress": "",
              "entryServiceName": "/opentracing-case/case/open-tracing",
              "entryApplicationInstanceId": "nq 0"
            }
          ],
          "actualRefs": []
        }
      ]
    }
  ]
}
[2017-08-20 10:37:24:937] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:13) - actual data:
{
  "registryItems": {
    "applications": [
      {
        "open-tracing-case": 2
      }
    ],
    "instances": [
      {
        "open-tracing-case": 1
      }
    ],
    "operationNames": [
      {
        "open-tracing-case": [
          "OpentracingCase/doGet",
          "Thread/Thread-4",
          "OpentracingCase/testContinuation",
          "OpentracingCase/testLocalSpan",
          "/opentracing-case/case/open-tracing"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "open-tracing-case",
      "segmentSize": "2",
      "segments": [
        {
          "segmentId": "15615031964374480000",
          "spans": [
            {
              "operationName": "OpentracingCase/run",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Unknown",
              "tags": [],
              "logs": [],
              "startTime": "1503196437448",
              "endTime": "1503196438453",
              "componentId": "0",
              "componentName": "",
              "isError": false,
              "spanType": "Local",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [
            {
              "parentServiceId": "0",
              "parentServiceName": "/opentracing-case/case/open-tracing",
              "networkAddressId": "0",
              "entryServiceId": "0",
              "refType": "CrossThread",
              "parentSpanId": "3",
              "parentTraceSegmentId": "12815031964372060000",
              "parentApplicationInstanceId": "0",
              "networkAddress": "",
              "entryServiceName": "/opentracing-case/case/open-tracing",
              "entryApplicationInstanceId": "1"
            }
          ],
          "actualRefs": []
        },
        {
          "segmentId": "12815031964372060000",
          "spans": [
            {
              "operationName": "OpentracingCase/testContinuation",
              "operationId": "0",
              "parentSpanId": "2",
              "spanId": "3",
              "spanLayer": "Unknown",
              "tags": [
                {
                  "key": "name",
                  "value": "test"
                }
              ],
              "logs": [],
              "startTime": "1503196437433",
              "endTime": "1503196437448",
              "componentId": "0",
              "componentName": "",
              "isError": false,
              "spanType": "Local",
              "peer": "",
              "peerId": "0"
            },
            {
              "operationName": "OpentracingCase/testLocalSpan",
              "operationId": "0",
              "parentSpanId": "1",
              "spanId": "2",
              "spanLayer": "Unknown",
              "tags": [
                {
                  "key": "name",
                  "value": "Test"
                }
              ],
              "logs": [],
              "startTime": "1503196437433",
              "endTime": "1503196437448",
              "componentId": "0",
              "componentName": "OpentracingService",
              "isError": false,
              "spanType": "Local",
              "peer": "",
              "peerId": "0"
            },
            {
              "operationName": "OpentracingCase/doGet",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Unknown",
              "tags": [],
              "logs": [],
              "startTime": "1503196437428",
              "endTime": "1503196439451",
              "componentId": "0",
              "componentName": "",
              "isError": false,
              "spanType": "Local",
              "peer": "",
              "peerId": "0"
            },
            {
              "operationName": "/opentracing-case/case/open-tracing",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/opentracing-case/case/open-tracing"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "1503196437222",
              "endTime": "1503196439468",
              "componentId": "1",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [],
          "actualRefs": []
        }
      ]
    }
  ]
}
[2017-08-20 10:37:24:937] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:12) - registry applications assert successful.
[2017-08-20 10:37:24:937] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:14) - registry instances assert successful.
[2017-08-20 10:37:24:938] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:16) - registry operation name assert successful.
[2017-08-20 10:37:24:938] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:938] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:938] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:16) - segment items assert successful.
[2017-08-20 10:37:24:938] [INFO] - org.skywalking.apm.test.agent.tool.entity.TestCaseDesc$Parser.parse(TestCaseDesc.java:41) - load case desc: caseName[spring-plugin-sync], caseRequestURL[http://localhost:8080/sync], components[[org.skywalking.apm.test.agent.tool.entity.TestCase$Component@4795ded0, org.skywalking.apm.test.agent.tool.entity.TestCase$Component@53dacd14]], isValidate[true]
[2017-08-20 10:37:24:939] [INFO] - org.skywalking.apm.test.agent.tool.Main.main(Main.java:44) - start to assert data of test case[spring-plugin-sync]
[2017-08-20 10:37:24:957] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:12) - excepted data:
{
  "registryItems": {
    "applications": [
      {
        "spring-case": "nq 0"
      }
    ],
    "instances": [
      {
        "spring-case": "nq 0"
      }
    ],
    "operationNames": [
      {
        "spring-case": [
          "/rest/1",
          "/rest/",
          "/sync",
          "/rest/{id}"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "spring-case",
      "segmentSize": "5",
      "segments": [
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "/rest/",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/"
                },
                {
                  "key": "http.method",
                  "value": "POST"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "13",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "localhost:8080",
              "peerId": "0"
            },
            {
              "operationName": "/rest/1",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "2",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "13",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "localhost:8080",
              "peerId": "0"
            },
            {
              "operationName": "/rest/1",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "3",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "PUT"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "13",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "localhost:8080",
              "peerId": "0"
            },
            {
              "operationName": "/rest/1",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "4",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "DELETE"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "13",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "localhost:8080",
              "peerId": "0"
            },
            {
              "operationName": "/sync",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/sync"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [],
          "actualRefs": []
        },
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "/rest/",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/"
                },
                {
                  "key": "http.method",
                  "value": "POST"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [
            {
              "parentServiceId": "0",
              "parentServiceName": "/sync",
              "networkAddressId": "0",
              "entryServiceId": "0",
              "refType": "CrossProcess",
              "parentSpanId": "1",
              "parentTraceSegmentId": "${spring-case[0]}",
              "parentApplicationInstanceId": "nq 0",
              "networkAddress": "localhost:8080",
              "entryServiceName": "/sync",
              "entryApplicationInstanceId": "nq 0"
            }
          ],
          "actualRefs": []
        },
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "/rest/{id}",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [
            {
              "parentServiceId": "0",
              "parentServiceName": "/sync",
              "networkAddressId": "0",
              "entryServiceId": "0",
              "refType": "CrossProcess",
              "parentSpanId": "2",
              "parentTraceSegmentId": "${spring-case[0]}",
              "parentApplicationInstanceId": "nq 0",
              "networkAddress": "localhost:8080",
              "entryServiceName": "/sync",
              "entryApplicationInstanceId": "nq 0"
            }
          ],
          "actualRefs": []
        },
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "/rest/{id}",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "PUT"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [
            {
              "parentServiceId": "0",
              "parentServiceName": "/sync",
              "networkAddressId": "0",
              "entryServiceId": "0",
              "refType": "CrossProcess",
              "parentSpanId": "3",
              "parentTraceSegmentId": "${spring-case[0]}",
              "parentApplicationInstanceId": "nq 0",
              "networkAddress": "localhost:8080",
              "entryServiceName": "/sync",
              "entryApplicationInstanceId": "nq 0"
            }
          ],
          "actualRefs": []
        },
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "/rest/{id}",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "DELETE"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [
            {
              "parentServiceId": "0",
              "parentServiceName": "/sync",
              "networkAddressId": "0",
              "entryServiceId": "0",
              "refType": "CrossProcess",
              "parentSpanId": "4",
              "parentTraceSegmentId": "${spring-case[0]}",
              "parentApplicationInstanceId": "nq 0",
              "networkAddress": "localhost:8080",
              "entryServiceName": "/sync",
              "entryApplicationInstanceId": "nq 0"
            }
          ],
          "actualRefs": []
        }
      ]
    }
  ]
}
[2017-08-20 10:37:24:963] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:13) - actual data:
{
  "registryItems": {
    "applications": [
      {
        "spring-case": 2
      }
    ],
    "instances": [
      {
        "spring-case": 1
      }
    ],
    "operationNames": [
      {
        "spring-case": [
          "/rest/1",
          "/rest/",
          "/sync",
          "/rest/{id}"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "spring-case",
      "segmentSize": "5",
      "segments": [
        {
          "segmentId": "13915031965188770000",
          "spans": [
            {
              "operationName": "/rest/",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/"
                },
                {
                  "key": "http.method",
                  "value": "POST"
                }
              ],
              "logs": [],
              "startTime": "1503196518878",
              "endTime": "1503196518933",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [
            {
              "parentServiceId": "0",
              "parentServiceName": "/sync",
              "networkAddressId": "0",
              "entryServiceId": "0",
              "refType": "CrossProcess",
              "parentSpanId": "1",
              "parentTraceSegmentId": "13815031965186150000",
              "parentApplicationInstanceId": "1",
              "networkAddress": "localhost:8080",
              "entryServiceName": "/sync",
              "entryApplicationInstanceId": "1"
            }
          ],
          "actualRefs": []
        },
        {
          "segmentId": "14115031965189490000",
          "spans": [
            {
              "operationName": "/rest/{id}",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "1503196518949",
              "endTime": "1503196518977",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [
            {
              "parentServiceId": "0",
              "parentServiceName": "/sync",
              "networkAddressId": "0",
              "entryServiceId": "0",
              "refType": "CrossProcess",
              "parentSpanId": "2",
              "parentTraceSegmentId": "13815031965186150000",
              "parentApplicationInstanceId": "1",
              "networkAddress": "localhost:8080",
              "entryServiceName": "/sync",
              "entryApplicationInstanceId": "1"
            }
          ],
          "actualRefs": []
        },
        {
          "segmentId": "14215031965189840000",
          "spans": [
            {
              "operationName": "/rest/{id}",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "PUT"
                }
              ],
              "logs": [],
              "startTime": "1503196518984",
              "endTime": "1503196518995",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [
            {
              "parentServiceId": "0",
              "parentServiceName": "/sync",
              "networkAddressId": "0",
              "entryServiceId": "0",
              "refType": "CrossProcess",
              "parentSpanId": "3",
              "parentTraceSegmentId": "13815031965186150000",
              "parentApplicationInstanceId": "1",
              "networkAddress": "localhost:8080",
              "entryServiceName": "/sync",
              "entryApplicationInstanceId": "1"
            }
          ],
          "actualRefs": []
        },
        {
          "segmentId": "14315031965189960000",
          "spans": [
            {
              "operationName": "/rest/{id}",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "DELETE"
                }
              ],
              "logs": [],
              "startTime": "1503196518996",
              "endTime": "1503196519002",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [
            {
              "parentServiceId": "0",
              "parentServiceName": "/sync",
              "networkAddressId": "0",
              "entryServiceId": "0",
              "refType": "CrossProcess",
              "parentSpanId": "4",
              "parentTraceSegmentId": "13815031965186150000",
              "parentApplicationInstanceId": "1",
              "networkAddress": "localhost:8080",
              "entryServiceName": "/sync",
              "entryApplicationInstanceId": "1"
            }
          ],
          "actualRefs": []
        },
        {
          "segmentId": "13815031965186150000",
          "spans": [
            {
              "operationName": "/rest/",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/"
                },
                {
                  "key": "http.method",
                  "value": "POST"
                }
              ],
              "logs": [],
              "startTime": "1503196518736",
              "endTime": "1503196518945",
              "componentId": "13",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "localhost:8080",
              "peerId": "0"
            },
            {
              "operationName": "/rest/1",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "2",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "1503196518946",
              "endTime": "1503196518982",
              "componentId": "13",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "localhost:8080",
              "peerId": "0"
            },
            {
              "operationName": "/rest/1",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "3",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "PUT"
                }
              ],
              "logs": [],
              "startTime": "1503196518982",
              "endTime": "1503196518991",
              "componentId": "13",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "localhost:8080",
              "peerId": "0"
            },
            {
              "operationName": "/rest/1",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "4",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/rest/1"
                },
                {
                  "key": "http.method",
                  "value": "DELETE"
                }
              ],
              "logs": [],
              "startTime": "1503196518991",
              "endTime": "1503196519002",
              "componentId": "13",
              "componentName": "",
              "isError": false,
              "spanType": "Exit",
              "peer": "localhost:8080",
              "peerId": "0"
            },
            {
              "operationName": "/sync",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:8080/sync"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "1503196518619",
              "endTime": "1503196519034",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [],
          "actualRefs": []
        }
      ]
    }
  ]
}
[2017-08-20 10:37:24:964] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:12) - registry applications assert successful.
[2017-08-20 10:37:24:965] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:14) - registry instances assert successful.
[2017-08-20 10:37:24:965] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:16) - registry operation name assert successful.
[2017-08-20 10:37:24:965] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:966] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:966] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:966] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:71) - span[/rest/{id}] are not equal ignore this segment. 
tags: 
 expected: http://localhost:8080/rest/1
 actual: http://localhost:8080/rest/
[2017-08-20 10:37:24:966] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:966] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:967] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:71) - span[/rest/{id}] are not equal ignore this segment. 
tags: 
 expected: http://localhost:8080/rest/1
 actual: http://localhost:8080/rest/
[2017-08-20 10:37:24:967] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:967] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:71) - span[/rest/{id}] are not equal ignore this segment. 
tags: 
 expected: PUT
 actual: GET
[2017-08-20 10:37:24:967] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:967] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:968] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:71) - span[/rest/{id}] are not equal ignore this segment. 
tags: 
 expected: http://localhost:8080/rest/1
 actual: http://localhost:8080/rest/
[2017-08-20 10:37:24:968] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:968] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:71) - span[/rest/{id}] are not equal ignore this segment. 
tags: 
 expected: DELETE
 actual: GET
[2017-08-20 10:37:24:968] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:968] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:71) - span[/rest/{id}] are not equal ignore this segment. 
tags: 
 expected: DELETE
 actual: PUT
[2017-08-20 10:37:24:968] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:969] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:16) - segment items assert successful.
[2017-08-20 10:37:24:969] [INFO] - org.skywalking.apm.test.agent.tool.entity.TestCaseDesc$Parser.parse(TestCaseDesc.java:41) - load case desc: caseName[trace-activation-case], caseRequestURL[http://localhost:18080/trace-activation-case/trace-activation], components[[org.skywalking.apm.test.agent.tool.entity.TestCase$Component@4940809c, org.skywalking.apm.test.agent.tool.entity.TestCase$Component@16423501]], isValidate[true]
[2017-08-20 10:37:24:969] [INFO] - org.skywalking.apm.test.agent.tool.Main.main(Main.java:44) - start to assert data of test case[trace-activation-case]
[2017-08-20 10:37:24:975] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:12) - excepted data:
{
  "registryItems": {
    "applications": [
      {
        "trace-activation-case": "nq 0"
      }
    ],
    "instances": [
      {
        "trace-activation-case": 1
      }
    ],
    "operationNames": [
      {
        "trace-activation-case": [
          "/trace-activation",
          "org.skywalking.apm.testcase.trace.annotation.service.CaseService.queryUser(java.lang.String)",
          "updateUser"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "trace-activation-case",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "not null",
          "spans": [
            {
              "operationName": "org.skywalking.apm.testcase.trace.annotation.service.CaseService.queryUser(java.lang.String)",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Unknown",
              "tags": [
                {
                  "key": "user.id",
                  "value": "201708180001"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "0",
              "isError": false,
              "spanType": "Local",
              "peer": "",
              "peerId": "eq 0"
            },
            {
              "operationName": "updateUser",
              "operationId": "eq 0",
              "parentSpanId": "0",
              "spanId": "2",
              "spanLayer": "Unknown",
              "tags": [],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "0",
              "isError": false,
              "spanType": "Local",
              "peer": "",
              "peerId": "eq 0"
            },
            {
              "operationName": "/trace-activation",
              "operationId": "eq 0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/trace-activation-case/trace-activation"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "nq 0",
              "endTime": "nq 0",
              "componentId": "14",
              "isError": false,
              "spanType": "Entry",
              "peerId": "eq 0"
            }
          ],
          "refs": [],
          "actualRefs": []
        }
      ]
    }
  ]
}
[2017-08-20 10:37:24:977] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:13) - actual data:
{
  "registryItems": {
    "applications": [
      {
        "trace-activation-case": 2
      }
    ],
    "instances": [
      {
        "trace-activation-case": 1
      }
    ],
    "operationNames": [
      {
        "trace-activation-case": [
          "org.skywalking.apm.testcase.trace.annotation.service.CaseService.queryUser(java.lang.String)",
          "/trace-activation",
          "updateUser"
        ]
      }
    ]
  },
  "segmentItems": [
    {
      "applicationCode": "trace-activation-case",
      "segmentSize": "1",
      "segments": [
        {
          "segmentId": "13815031966051710000",
          "spans": [
            {
              "operationName": "org.skywalking.apm.testcase.trace.annotation.service.CaseService.queryUser(java.lang.String)",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "1",
              "spanLayer": "Unknown",
              "tags": [
                {
                  "key": "user.id",
                  "value": "201708180001"
                }
              ],
              "logs": [],
              "startTime": "1503196605278",
              "endTime": "1503196606316",
              "componentId": "0",
              "componentName": "",
              "isError": false,
              "spanType": "Local",
              "peer": "",
              "peerId": "0"
            },
            {
              "operationName": "updateUser",
              "operationId": "0",
              "parentSpanId": "0",
              "spanId": "2",
              "spanLayer": "Unknown",
              "tags": [],
              "logs": [],
              "startTime": "1503196606316",
              "endTime": "1503196606316",
              "componentId": "0",
              "componentName": "",
              "isError": false,
              "spanType": "Local",
              "peer": "",
              "peerId": "0"
            },
            {
              "operationName": "/trace-activation",
              "operationId": "0",
              "parentSpanId": "-1",
              "spanId": "0",
              "spanLayer": "Http",
              "tags": [
                {
                  "key": "url",
                  "value": "http://localhost:18080/trace-activation-case/trace-activation"
                },
                {
                  "key": "http.method",
                  "value": "GET"
                }
              ],
              "logs": [],
              "startTime": "1503196605177",
              "endTime": "1503196606362",
              "componentId": "14",
              "componentName": "",
              "isError": false,
              "spanType": "Entry",
              "peer": "",
              "peerId": "0"
            }
          ],
          "refs": [],
          "actualRefs": []
        }
      ]
    }
  ]
}
[2017-08-20 10:37:24:977] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:12) - registry applications assert successful.
[2017-08-20 10:37:24:977] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:14) - registry instances assert successful.
[2017-08-20 10:37:24:977] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.RegistryItemsAssert.assertEquals(RegistryItemsAssert.java:16) - registry operation name assert successful.
[2017-08-20 10:37:24:977] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.SegmentAssert.spansEquals(SegmentAssert.java:64) - excepted span size is equals actual span size, begin to assert span.
[2017-08-20 10:37:24:977] [INFO] - org.skywalking.apm.test.agent.tool.caseassert.assertor.DataAssert.assertEquals(DataAssert.java:16) - segment items assert successful.
2017-08-20 10:37:26,156 pool-1-thread-1 DEBUG Stopping LoggerContext[name=4b67cf4d, org.apache.logging.log4j.core.LoggerContext@2f9f7dcf]
2017-08-20 10:37:26,156 pool-1-thread-1 DEBUG Stopping LoggerContext[name=4b67cf4d, org.apache.logging.log4j.core.LoggerContext@2f9f7dcf]...
2017-08-20 10:37:26,159 pool-1-thread-1 DEBUG Shutting down OutputStreamManager SYSTEM_OUT.false.false
2017-08-20 10:37:26,159 pool-1-thread-1 DEBUG Shut down OutputStreamManager SYSTEM_OUT.false.false, all resources released: true
2017-08-20 10:37:26,159 pool-1-thread-1 DEBUG Appender Console stopped with status true
2017-08-20 10:37:26,160 pool-1-thread-1 DEBUG Stopped XmlConfiguration[location=jar:file:/Users/xin/workbench/ascrutae/agent-integration-test/workspace/skywalking-autotest.jar!/log4j2.xml] OK
2017-08-20 10:37:26,160 pool-1-thread-1 DEBUG Stopped LoggerContext[name=4b67cf4d, org.apache.logging.log4j.core.LoggerContext@2f9f7dcf] with status true
